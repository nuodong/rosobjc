{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fmodern\fcharset77 Courier;
}
{\colortbl;\red255\green255\blue255;\red63\green63\blue63;}
\pard\tx360\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs24 \cf0 CHANGES\
\
\
04/03/2002\
\
XRConnection\

\f1\b0 	Added ability to set usage of non XML conformant entity encoding for broken servers and\
	encoding of experimental nil values.\
	Also stripped superfluous newlines in strings to reduce bandwidth (sort of).\

\f0\b \
XRCoder\

\f1\b0 	Encoding of nil values is now possible. This is quite an experimental feature, but some servers\
	might be happy if we can deliver it.\

\f0\b \
XREncoder\

\f1\b0 	Fixed issues with XML entity mapping by providing an interface for choosing the appropriate mappings.\
	XML conformance is now the default. Also removed redundant whitespace in encoded strings.\

\f0\b \
Objects+XRCoding\
	
\f1\b0 NSNull objects will ask XRCoder to encode them, thus behaviour depends on the coder's configuration\
	which is much better now.\

\f0\b \
\
10/09/2002\
\
XRConstants\

\f1\b0 	Removed several, now unused, constants. Also changed error codes to be compatible with\
\cf2 \CocoaLigature0 	Specification for Fault Code Interoperability, version 20010516\
	(see http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php).\
\cf0 \CocoaLigature1 \

\f0\b XRConnection\

\f1\b0 	HTTP errors other than 401(Authentication required) will be raised as exceptions as of now. The are\
	other candidates we could likely deal more gracefully with (3xx codes) - however this has still to\
	be done.\
\

\f0\b \
07/21/2002\
\
XRInvocation\
	
\f1\b0 Automatic conversion/coercion of Objective-C scalar types.\

\f0\b \
\
07/17/2002\
\
XRConnection\
	
\f1\b0 Support for HTTP authentication. Several minor extensions to exchange authentication information\
	between the transport and the XML-RPC layer.\

\f0\b \
XRConstants\
	
\f1\b0 New constants for authentication and transport level exceptions.\

\f0\b \
\
07/17/2002\
\
XRInvocationStorage\
	
\f1\b0 Changed the rules for handle/method pairs. Methods can now have a dot-separated handle of\
	arbitrary length or no handle at all. Also added new methods to unregister invocations based on\
	a method's name alone.\

\f0\b \
XRConnection\
	
\f1\b0 Changed all appropriate methods to cope with the fact that handles can now be *nil*. Also, added some\
	new API to register and unregister invocations for method names. This comes in handy when you have\
	to (de)construct 'components' on the fly during runtime.\

\f0\b \
XRProxy\
	
\f1\b0 Since handles can be *nil* here, performMethod needs to take care of this fact.\

\f0\b \
\
06/07/2002\
\
XREValue\
	
\f1\b0 Finally accepted the fact that XML-RPC cannot transport *nil* values. Don't know how I could\
	overlook that fact. XREValue correctly returns an empty string in such cases now.\

\f0\b \
Objects+XRCoding\
	
\f1\b0 Added NSNull to the list of objects that can encode themselves automatically now. NSNull objects\
	will encode themselves as empty strings now (the same behavior as before, but this time explicitly).\

\f0\b \
XRConnection\
	
\f1\b0 Replaced methodInvocationLUT with an XRInvocationStorage. Changed all references to use\
	the new XRInvocationStorage methods instead.\

\f0\b \
XRInvocationStorage\
	
\f1\b0 The XRInvocationStorage is responsible for associating method names (including handles) and\
	method signatures with XRInvocations.\

\f0\b \
XRMethodSignature\
	
\f1\b0 Two new class methods. One to map our XMLRPC signature types to their corresponding XML tags ,\
	the other to create signature type strings from an NSArray's objects.\

\f0\b \
\
04/12/2002\
\
XRInvocation\
	
\f1\b0 Inspired by the necessary re-implementation of XRInvocation rethought its interface.\
	XRInvocation's hold the XML-RPC method now. Also, XRInvocation is able to perform argument\
	checks now on its own, which offers new perspectives for subclassers.\
\

\f0\b XRGenericInvocation\
	
\f1\b0 New subclass of XRInvocation which can be invoked on a generic Objective-C method. The only\
	restriction here is, that the Objective-C method signature equals that of\
	
\f2 -(id)performMethod:(NSString *)method withArguments:(NSArray *)arguments
\f1 \
	Also, XRGenericInvocation implements its own type checking and usually ensures that the number\
	of arguments received equals the constructed XML-RPC method signature. Nifty.\
\
 
\f0\b XRMethodSignature\
	
\f1\b0 These objects do not necessarily have to keep an objcSignature now. Although this is usually\
	what they are used for (to mediate between XML-RPC and Objective-C) I had a rare case\
	(XRGenericInvocation) where they just had to suit as a container for XML-RPC method types.\
\

\f0\b XRServing\
	
\f1\b0 Changed the protocol. Because XRInvocation has a richer API now, the method mappings\
	have been obsoleted. Instead of using a mapping now, a server can provide the fully initialized\
	XRInvocation objects instead. XRConnection provides the necessary tools as usual.\
\

\f0\b XRConnection\
	
\f1\b0 Removed the old mapping tools because of changes in XRServing. Instead, added two new\
	tools for creating XRInvocation objects.\
\
\

\f0\b 04/08/2002\
\
XRInvocation\
	
\f1\b0 XRInvocation is not subclassable from NSInvocation on GNUstep (different class-cluster\
	architecture). Re-implemented XRInvocation as a wrapper.\
}